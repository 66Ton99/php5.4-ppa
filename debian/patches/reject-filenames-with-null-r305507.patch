--- a/ext/standard/dir.c
+++ b/ext/standard/dir.c
@@ -329,6 +329,10 @@ PHP_FUNCTION(chdir)
 		RETURN_FALSE;
 	}
 
+	if (strlen(str) != str_len) {
+		RETURN_FALSE;
+	}
+
 	if ((PG(safe_mode) && !php_checkuid(str, NULL, CHECKUID_CHECK_FILE_AND_DIR)) || php_check_open_basedir(str TSRMLS_CC)) {
 		RETURN_FALSE;
 	}
@@ -444,6 +448,10 @@ PHP_FUNCTION(glob)
 		RETURN_FALSE;
 	}
 
+	if (strlen(pattern) != pattern_len) {
+		RETURN_FALSE;
+	}
+
 	if (pattern_len >= MAXPATHLEN) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Pattern exceeds the maximum allowed length of %d characters", MAXPATHLEN);
 		RETURN_FALSE;
@@ -566,6 +574,10 @@ PHP_FUNCTION(scandir)
 	}
 
 	if (strlen(dirn) != dirn_len) {
+		RETURN_FALSE;
+	}
+
+	if (strlen(dirn) != dirn_len) {
 		RETURN_FALSE;
 	}
 
--- a/ext/standard/filestat.c
+++ b/ext/standard/filestat.c
@@ -383,6 +383,10 @@ PHP_FUNCTION(disk_free_space)
 		RETURN_FALSE;
 	}
 
+	if (strlen(path) != path_len) {
+		RETURN_FALSE;
+	}
+
 	if (php_disk_free_space(path, &bytesfree TSRMLS_CC) == SUCCESS) {
 		RETURN_DOUBLE(bytesfree);
 	}
@@ -407,6 +411,10 @@ static void php_do_chgrp(INTERNAL_FUNCTI
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (Z_TYPE_P(group) == IS_LONG) {
 		gid = (gid_t)Z_LVAL_P(group);
 	} else if (Z_TYPE_P(group) == IS_STRING) {
@@ -512,6 +520,10 @@ static void php_do_chown(INTERNAL_FUNCTI
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (Z_TYPE_P(user) == IS_LONG) {
 		uid = (uid_t)Z_LVAL_P(user);
 	} else if (Z_TYPE_P(user) == IS_STRING) {
@@ -623,6 +635,10 @@ PHP_FUNCTION(chmod)
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	/* Check the basedir */
 	if (php_check_open_basedir(filename TSRMLS_CC)) {
 		RETURN_FALSE;
@@ -680,6 +696,10 @@ PHP_FUNCTION(touch)
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	switch (argc) {
 		case 1:
 #ifdef HAVE_UTIME_NULL
@@ -798,6 +818,10 @@ PHPAPI void php_stat(const char *filenam
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_length) {
+		RETURN_FALSE;
+	}
+
 	if (strlen(filename) != filename_length) {
 		RETURN_FALSE;
 	}
--- a/ext/posix/posix.c
+++ b/ext/posix/posix.c
@@ -846,6 +846,10 @@ PHP_FUNCTION(posix_mkfifo)
 		RETURN_FALSE;
 	}
 
+	if (strlen(path) != path_len) {
+		RETURN_FALSE;
+	}
+
 	if (php_check_open_basedir_ex(path, 0 TSRMLS_CC) ||
 			(PG(safe_mode) && (!php_checkuid(path, NULL, CHECKUID_ALLOW_ONLY_DIR)))) {
 		RETURN_FALSE;
@@ -885,6 +889,10 @@ PHP_FUNCTION(posix_mknod)
 		RETURN_FALSE;
 	}
 
+	if (strlen(path) != path_len) {
+		RETURN_FALSE;
+	}
+
 	if (php_check_open_basedir_ex(path, 0 TSRMLS_CC) ||
 			(PG(safe_mode) && (!php_checkuid(path, NULL, CHECKUID_ALLOW_ONLY_DIR)))) {
 		RETURN_FALSE;
@@ -965,6 +973,10 @@ PHP_FUNCTION(posix_access)
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (strlen(filename) != filename_len) {
 		RETURN_FALSE;
 	}
--- a/ext/enchant/enchant.c
+++ b/ext/enchant/enchant.c
@@ -599,6 +599,10 @@ PHP_FUNCTION(enchant_broker_request_pwl_
 		RETURN_FALSE;
 	}
 
+	if (strlen(pwl) != pwllen) {
+		RETURN_FALSE;
+	}
+
 #if PHP_API_VERSION < 20100412
 	if ((PG(safe_mode) && (!php_checkuid(pwl, NULL, CHECKUID_CHECK_FILE_AND_DIR))) || php_check_open_basedir(pwl TSRMLS_CC)) {
 #else
--- a/ext/oci8/oci8_interface.c
+++ b/ext/oci8/oci8_interface.c
@@ -276,6 +276,10 @@ PHP_FUNCTION(oci_lob_load)
 			return;
 		}	
 	}
+
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
 	
 	if (zend_hash_find(Z_OBJPROP_P(z_descriptor), "descriptor", sizeof("descriptor"), (void **)&tmp) == FAILURE) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to find descriptor property");
@@ -700,7 +704,7 @@ PHP_FUNCTION(oci_lob_flush)
 			return;
 		}
 	}
-	
+
 	if (zend_hash_find(Z_OBJPROP_P(z_descriptor), "descriptor", sizeof("descriptor"), (void **)&tmp) == FAILURE) {
 		php_error_docref(NULL TSRMLS_CC, E_WARNING, "Unable to find descriptor property");
 		RETURN_FALSE;
@@ -923,6 +927,10 @@ PHP_FUNCTION(oci_lob_export)
 	if (length == -1) {
 		length = lob_length - descriptor->lob_current_position;
 	}
+
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
 	
 	if (length == 0) {
 		/* nothing to write, fail silently */
--- a/ext/zip/php_zip.c
+++ b/ext/zip/php_zip.c
@@ -1155,6 +1155,10 @@ static PHP_NAMED_FUNCTION(zif_zip_open)
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (ZIP_OPENBASEDIR_CHECKPATH(filename)) {
 		RETURN_FALSE;
 	}
@@ -1448,6 +1452,10 @@ static ZIPARCHIVE_METHOD(open)
 		RETURN_FALSE;
 	}
 
+	if (strlen(filename) != filename_len) {
+		RETURN_FALSE;
+	}
+
 	if (ZIP_OPENBASEDIR_CHECKPATH(filename)) {
 		RETURN_FALSE;
 	}
@@ -2465,6 +2473,9 @@ static void php_zip_get_from(INTERNAL_FU
 			return;
 		}
 		if (strlen(filename) != filename_len) {
+			return;
+		}
+		if (strlen(filename) != filename_len) {
 			return;
 		}
 		PHP_ZIP_STAT_PATH(intern, filename, filename_len, flags, sb);
--- a/main/fopen_wrappers.c
+++ b/main/fopen_wrappers.c
@@ -540,6 +540,10 @@ PHPAPI char *php_resolve_path(const char
 		return NULL;
 	}
 
+	if (strlen(filename) != filename_length) {
+		return NULL;
+	}
+
 	/* Don't resolve paths which contain protocol (except of file://) */
 	for (p = filename; isalnum((int)*p) || *p == '+' || *p == '-' || *p == '.'; p++);
 	if ((*p == ':') && (p - filename > 1) && (p[1] == '/') && (p[2] == '/')) {
